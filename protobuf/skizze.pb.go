// Code generated by protoc-gen-go.
// source: src/datamodel/protobuf/skizze.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	src/datamodel/protobuf/skizze.proto

It has these top-level messages:
	Empty
	SketchProperties
	SketchState
	Domain
	Sketch
	Membership
	Frequency
	Rank
	CreateSnapshotRequest
	CreateSnapshotReply
	GetSnapshotRequest
	GetSnapshotReply
	ListRequest
	ListReply
	ListDomainsReply
	AddRequest
	AddReply
	GetRequest
	MembershipResult
	FrequencyResult
	CardinalityResult
	RankingsResult
	GetMembershipReply
	GetFrequencyReply
	GetCardinalityReply
	GetRankingsReply
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

//
// Enums
//
type SketchType int32

const (
	SketchType_MEMB SketchType = 1
	SketchType_FREQ SketchType = 2
	SketchType_RANK SketchType = 3
	SketchType_CARD SketchType = 4
)

var SketchType_name = map[int32]string{
	1: "MEMB",
	2: "FREQ",
	3: "RANK",
	4: "CARD",
}
var SketchType_value = map[string]int32{
	"MEMB": 1,
	"FREQ": 2,
	"RANK": 3,
	"CARD": 4,
}

func (x SketchType) Enum() *SketchType {
	p := new(SketchType)
	*p = x
	return p
}
func (x SketchType) String() string {
	return proto.EnumName(SketchType_name, int32(x))
}
func (x *SketchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SketchType_value, data, "SketchType")
	if err != nil {
		return err
	}
	*x = SketchType(value)
	return nil
}
func (SketchType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SnapshotStatus int32

const (
	SnapshotStatus_PENDING     SnapshotStatus = 1
	SnapshotStatus_IN_PROGRESS SnapshotStatus = 2
	SnapshotStatus_SUCCESSFUL  SnapshotStatus = 3
	SnapshotStatus_FAILED      SnapshotStatus = 4
)

var SnapshotStatus_name = map[int32]string{
	1: "PENDING",
	2: "IN_PROGRESS",
	3: "SUCCESSFUL",
	4: "FAILED",
}
var SnapshotStatus_value = map[string]int32{
	"PENDING":     1,
	"IN_PROGRESS": 2,
	"SUCCESSFUL":  3,
	"FAILED":      4,
}

func (x SnapshotStatus) Enum() *SnapshotStatus {
	p := new(SnapshotStatus)
	*p = x
	return p
}
func (x SnapshotStatus) String() string {
	return proto.EnumName(SnapshotStatus_name, int32(x))
}
func (x *SnapshotStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SnapshotStatus_value, data, "SnapshotStatus")
	if err != nil {
		return err
	}
	*x = SnapshotStatus(value)
	return nil
}
func (SnapshotStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

//
// Generic Structures
//
type Empty struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SketchProperties struct {
	MaxUniqueItems   *int64   `protobuf:"varint,1,opt,name=maxUniqueItems" json:"maxUniqueItems,omitempty"`
	ErrorRate        *float32 `protobuf:"fixed32,2,opt,name=errorRate" json:"errorRate,omitempty"`
	Size             *int64   `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SketchProperties) Reset()                    { *m = SketchProperties{} }
func (m *SketchProperties) String() string            { return proto.CompactTextString(m) }
func (*SketchProperties) ProtoMessage()               {}
func (*SketchProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SketchProperties) GetMaxUniqueItems() int64 {
	if m != nil && m.MaxUniqueItems != nil {
		return *m.MaxUniqueItems
	}
	return 0
}

func (m *SketchProperties) GetErrorRate() float32 {
	if m != nil && m.ErrorRate != nil {
		return *m.ErrorRate
	}
	return 0
}

func (m *SketchProperties) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type SketchState struct {
	FillRate         *float32 `protobuf:"fixed32,1,opt,name=fillRate" json:"fillRate,omitempty"`
	LastSnapshot     *int64   `protobuf:"varint,2,opt,name=lastSnapshot" json:"lastSnapshot,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SketchState) Reset()                    { *m = SketchState{} }
func (m *SketchState) String() string            { return proto.CompactTextString(m) }
func (*SketchState) ProtoMessage()               {}
func (*SketchState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SketchState) GetFillRate() float32 {
	if m != nil && m.FillRate != nil {
		return *m.FillRate
	}
	return 0
}

func (m *SketchState) GetLastSnapshot() int64 {
	if m != nil && m.LastSnapshot != nil {
		return *m.LastSnapshot
	}
	return 0
}

// CreateDomain: name:required, propertiess:optional (array = nSketchTypes, order of types above)
// DeleteDomain: name:required
// GetDomain   : name:required
type Domain struct {
	Name             *string   `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Sketches         []*Sketch `protobuf:"bytes,2,rep,name=sketches" json:"sketches,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Domain) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Domain) GetSketches() []*Sketch {
	if m != nil {
		return m.Sketches
	}
	return nil
}

// CreateSketch: name:required, type:required, properties:optional
// DeleteSketch: name:required, type:required
// GetSketch   : name:required, type:required
type Sketch struct {
	Name             *string           `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type             *SketchType       `protobuf:"varint,2,req,name=type,enum=protobuf.SketchType" json:"type,omitempty"`
	Properties       *SketchProperties `protobuf:"bytes,3,opt,name=properties" json:"properties,omitempty"`
	State            *SketchState      `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Sketch) Reset()                    { *m = Sketch{} }
func (m *Sketch) String() string            { return proto.CompactTextString(m) }
func (*Sketch) ProtoMessage()               {}
func (*Sketch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Sketch) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Sketch) GetType() SketchType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SketchType_MEMB
}

func (m *Sketch) GetProperties() *SketchProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Sketch) GetState() *SketchState {
	if m != nil {
		return m.State
	}
	return nil
}

type Membership struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	IsMember         *bool   `protobuf:"varint,2,req,name=isMember" json:"isMember,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Membership) Reset()                    { *m = Membership{} }
func (m *Membership) String() string            { return proto.CompactTextString(m) }
func (*Membership) ProtoMessage()               {}
func (*Membership) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Membership) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Membership) GetIsMember() bool {
	if m != nil && m.IsMember != nil {
		return *m.IsMember
	}
	return false
}

type Frequency struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Count            *int64  `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Frequency) Reset()                    { *m = Frequency{} }
func (m *Frequency) String() string            { return proto.CompactTextString(m) }
func (*Frequency) ProtoMessage()               {}
func (*Frequency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Frequency) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Frequency) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type Rank struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Count            *int64  `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Rank) Reset()                    { *m = Rank{} }
func (m *Rank) String() string            { return proto.CompactTextString(m) }
func (*Rank) ProtoMessage()               {}
func (*Rank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Rank) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Rank) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// Right now empty but in the future can request specific snapshot location
// (e.g. S3 or disk) and snapshot options
type CreateSnapshotRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CreateSnapshotRequest) Reset()                    { *m = CreateSnapshotRequest{} }
func (m *CreateSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSnapshotRequest) ProtoMessage()               {}
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type CreateSnapshotReply struct {
	Status           *SnapshotStatus `protobuf:"varint,1,req,name=status,enum=protobuf.SnapshotStatus" json:"status,omitempty"`
	StatusMessage    *string         `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CreateSnapshotReply) Reset()                    { *m = CreateSnapshotReply{} }
func (m *CreateSnapshotReply) String() string            { return proto.CompactTextString(m) }
func (*CreateSnapshotReply) ProtoMessage()               {}
func (*CreateSnapshotReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateSnapshotReply) GetStatus() SnapshotStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return SnapshotStatus_PENDING
}

func (m *CreateSnapshotReply) GetStatusMessage() string {
	if m != nil && m.StatusMessage != nil {
		return *m.StatusMessage
	}
	return ""
}

// Empty for now, future can send in id of specific snapshot
type GetSnapshotRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetSnapshotRequest) Reset()                    { *m = GetSnapshotRequest{} }
func (m *GetSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSnapshotRequest) ProtoMessage()               {}
func (*GetSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetSnapshotReply struct {
	Status           *SnapshotStatus `protobuf:"varint,1,req,name=status,enum=protobuf.SnapshotStatus" json:"status,omitempty"`
	StatusMessage    *string         `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
	Timestamp        *int64          `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GetSnapshotReply) Reset()                    { *m = GetSnapshotReply{} }
func (m *GetSnapshotReply) String() string            { return proto.CompactTextString(m) }
func (*GetSnapshotReply) ProtoMessage()               {}
func (*GetSnapshotReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetSnapshotReply) GetStatus() SnapshotStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return SnapshotStatus_PENDING
}

func (m *GetSnapshotReply) GetStatusMessage() string {
	if m != nil && m.StatusMessage != nil {
		return *m.StatusMessage
	}
	return ""
}

func (m *GetSnapshotReply) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type ListRequest struct {
	Type             *SketchType `protobuf:"varint,1,req,name=type,enum=protobuf.SketchType" json:"type,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListRequest) GetType() SketchType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SketchType_MEMB
}

type ListReply struct {
	Sketches         []*Sketch `protobuf:"bytes,1,rep,name=sketches" json:"sketches,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListReply) GetSketches() []*Sketch {
	if m != nil {
		return m.Sketches
	}
	return nil
}

type ListDomainsReply struct {
	Names            []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ListDomainsReply) Reset()                    { *m = ListDomainsReply{} }
func (m *ListDomainsReply) String() string            { return proto.CompactTextString(m) }
func (*ListDomainsReply) ProtoMessage()               {}
func (*ListDomainsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListDomainsReply) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type AddRequest struct {
	Domain           *Domain  `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Sketch           *Sketch  `protobuf:"bytes,2,opt,name=sketch" json:"sketch,omitempty"`
	Values           []string `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AddRequest) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *AddRequest) GetSketch() *Sketch {
	if m != nil {
		return m.Sketch
	}
	return nil
}

func (m *AddRequest) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type AddReply struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// All Sketches will be of one kind
// All values will apply to all sketches (if card or ranking, values will be ignored)
type GetRequest struct {
	Sketches         []*Sketch `protobuf:"bytes,1,rep,name=sketches" json:"sketches,omitempty"`
	Values           []string  `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetRequest) GetSketches() []*Sketch {
	if m != nil {
		return m.Sketches
	}
	return nil
}

func (m *GetRequest) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type MembershipResult struct {
	Memberships      []*Membership `protobuf:"bytes,1,rep,name=memberships" json:"memberships,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *MembershipResult) Reset()                    { *m = MembershipResult{} }
func (m *MembershipResult) String() string            { return proto.CompactTextString(m) }
func (*MembershipResult) ProtoMessage()               {}
func (*MembershipResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MembershipResult) GetMemberships() []*Membership {
	if m != nil {
		return m.Memberships
	}
	return nil
}

type FrequencyResult struct {
	Frequencies      []*Frequency `protobuf:"bytes,2,rep,name=frequencies" json:"frequencies,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *FrequencyResult) Reset()                    { *m = FrequencyResult{} }
func (m *FrequencyResult) String() string            { return proto.CompactTextString(m) }
func (*FrequencyResult) ProtoMessage()               {}
func (*FrequencyResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FrequencyResult) GetFrequencies() []*Frequency {
	if m != nil {
		return m.Frequencies
	}
	return nil
}

type CardinalityResult struct {
	Cardinality      *int64 `protobuf:"varint,1,req,name=cardinality" json:"cardinality,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardinalityResult) Reset()                    { *m = CardinalityResult{} }
func (m *CardinalityResult) String() string            { return proto.CompactTextString(m) }
func (*CardinalityResult) ProtoMessage()               {}
func (*CardinalityResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CardinalityResult) GetCardinality() int64 {
	if m != nil && m.Cardinality != nil {
		return *m.Cardinality
	}
	return 0
}

type RankingsResult struct {
	Rankings         []*Rank `protobuf:"bytes,1,rep,name=rankings" json:"rankings,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RankingsResult) Reset()                    { *m = RankingsResult{} }
func (m *RankingsResult) String() string            { return proto.CompactTextString(m) }
func (*RankingsResult) ProtoMessage()               {}
func (*RankingsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RankingsResult) GetRankings() []*Rank {
	if m != nil {
		return m.Rankings
	}
	return nil
}

type GetMembershipReply struct {
	Results          []*MembershipResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *GetMembershipReply) Reset()                    { *m = GetMembershipReply{} }
func (m *GetMembershipReply) String() string            { return proto.CompactTextString(m) }
func (*GetMembershipReply) ProtoMessage()               {}
func (*GetMembershipReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetMembershipReply) GetResults() []*MembershipResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetFrequencyReply struct {
	Results          []*FrequencyResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *GetFrequencyReply) Reset()                    { *m = GetFrequencyReply{} }
func (m *GetFrequencyReply) String() string            { return proto.CompactTextString(m) }
func (*GetFrequencyReply) ProtoMessage()               {}
func (*GetFrequencyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetFrequencyReply) GetResults() []*FrequencyResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetCardinalityReply struct {
	Results          []*CardinalityResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *GetCardinalityReply) Reset()                    { *m = GetCardinalityReply{} }
func (m *GetCardinalityReply) String() string            { return proto.CompactTextString(m) }
func (*GetCardinalityReply) ProtoMessage()               {}
func (*GetCardinalityReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetCardinalityReply) GetResults() []*CardinalityResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetRankingsReply struct {
	Results          []*RankingsResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GetRankingsReply) Reset()                    { *m = GetRankingsReply{} }
func (m *GetRankingsReply) String() string            { return proto.CompactTextString(m) }
func (*GetRankingsReply) ProtoMessage()               {}
func (*GetRankingsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetRankingsReply) GetResults() []*RankingsResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "protobuf.Empty")
	proto.RegisterType((*SketchProperties)(nil), "protobuf.SketchProperties")
	proto.RegisterType((*SketchState)(nil), "protobuf.SketchState")
	proto.RegisterType((*Domain)(nil), "protobuf.Domain")
	proto.RegisterType((*Sketch)(nil), "protobuf.Sketch")
	proto.RegisterType((*Membership)(nil), "protobuf.Membership")
	proto.RegisterType((*Frequency)(nil), "protobuf.Frequency")
	proto.RegisterType((*Rank)(nil), "protobuf.Rank")
	proto.RegisterType((*CreateSnapshotRequest)(nil), "protobuf.CreateSnapshotRequest")
	proto.RegisterType((*CreateSnapshotReply)(nil), "protobuf.CreateSnapshotReply")
	proto.RegisterType((*GetSnapshotRequest)(nil), "protobuf.GetSnapshotRequest")
	proto.RegisterType((*GetSnapshotReply)(nil), "protobuf.GetSnapshotReply")
	proto.RegisterType((*ListRequest)(nil), "protobuf.ListRequest")
	proto.RegisterType((*ListReply)(nil), "protobuf.ListReply")
	proto.RegisterType((*ListDomainsReply)(nil), "protobuf.ListDomainsReply")
	proto.RegisterType((*AddRequest)(nil), "protobuf.AddRequest")
	proto.RegisterType((*AddReply)(nil), "protobuf.AddReply")
	proto.RegisterType((*GetRequest)(nil), "protobuf.GetRequest")
	proto.RegisterType((*MembershipResult)(nil), "protobuf.MembershipResult")
	proto.RegisterType((*FrequencyResult)(nil), "protobuf.FrequencyResult")
	proto.RegisterType((*CardinalityResult)(nil), "protobuf.CardinalityResult")
	proto.RegisterType((*RankingsResult)(nil), "protobuf.RankingsResult")
	proto.RegisterType((*GetMembershipReply)(nil), "protobuf.GetMembershipReply")
	proto.RegisterType((*GetFrequencyReply)(nil), "protobuf.GetFrequencyReply")
	proto.RegisterType((*GetCardinalityReply)(nil), "protobuf.GetCardinalityReply")
	proto.RegisterType((*GetRankingsReply)(nil), "protobuf.GetRankingsReply")
	proto.RegisterEnum("protobuf.SketchType", SketchType_name, SketchType_value)
	proto.RegisterEnum("protobuf.SnapshotStatus", SnapshotStatus_name, SnapshotStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Skizze service

type SkizzeClient interface {
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotReply, error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error)
	ListDomains(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListDomainsReply, error)
	CreateDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error)
	DeleteDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Empty, error)
	GetDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error)
	CreateSketch(ctx context.Context, in *Sketch, opts ...grpc.CallOption) (*Sketch, error)
	DeleteSketch(ctx context.Context, in *Sketch, opts ...grpc.CallOption) (*Empty, error)
	GetSketch(ctx context.Context, in *Sketch, opts ...grpc.CallOption) (*Sketch, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	GetMembership(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetMembershipReply, error)
	GetFrequency(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetFrequencyReply, error)
	GetCardinality(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCardinalityReply, error)
	GetRankings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetRankingsReply, error)
}

type skizzeClient struct {
	cc *grpc.ClientConn
}

func NewSkizzeClient(cc *grpc.ClientConn) SkizzeClient {
	return &skizzeClient{cc}
}

func (c *skizzeClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotReply, error) {
	out := new(CreateSnapshotReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/CreateSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotReply, error) {
	out := new(GetSnapshotReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/GetSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) ListDomains(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListDomainsReply, error) {
	out := new(ListDomainsReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/ListDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) CreateDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) DeleteDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/DeleteDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) GetDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) CreateSketch(ctx context.Context, in *Sketch, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/CreateSketch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) DeleteSketch(ctx context.Context, in *Sketch, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/DeleteSketch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) GetSketch(ctx context.Context, in *Sketch, opts ...grpc.CallOption) (*Sketch, error) {
	out := new(Sketch)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/GetSketch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) GetMembership(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetMembershipReply, error) {
	out := new(GetMembershipReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/GetMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) GetFrequency(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetFrequencyReply, error) {
	out := new(GetFrequencyReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/GetFrequency", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) GetCardinality(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCardinalityReply, error) {
	out := new(GetCardinalityReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/GetCardinality", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skizzeClient) GetRankings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetRankingsReply, error) {
	out := new(GetRankingsReply)
	err := grpc.Invoke(ctx, "/protobuf.Skizze/GetRankings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Skizze service

type SkizzeServer interface {
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotReply, error)
	GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	ListAll(context.Context, *Empty) (*ListReply, error)
	ListDomains(context.Context, *Empty) (*ListDomainsReply, error)
	CreateDomain(context.Context, *Domain) (*Domain, error)
	DeleteDomain(context.Context, *Domain) (*Empty, error)
	GetDomain(context.Context, *Domain) (*Domain, error)
	CreateSketch(context.Context, *Sketch) (*Sketch, error)
	DeleteSketch(context.Context, *Sketch) (*Empty, error)
	GetSketch(context.Context, *Sketch) (*Sketch, error)
	Add(context.Context, *AddRequest) (*AddReply, error)
	GetMembership(context.Context, *GetRequest) (*GetMembershipReply, error)
	GetFrequency(context.Context, *GetRequest) (*GetFrequencyReply, error)
	GetCardinality(context.Context, *GetRequest) (*GetCardinalityReply, error)
	GetRankings(context.Context, *GetRequest) (*GetRankingsReply, error)
}

func RegisterSkizzeServer(s *grpc.Server, srv SkizzeServer) {
	s.RegisterService(&_Skizze_serviceDesc, srv)
}

func _Skizze_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).CreateSnapshot(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).GetSnapshot(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).ListAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).ListDomains(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).CreateDomain(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).DeleteDomain(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).GetDomain(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_CreateSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Sketch)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).CreateSketch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_DeleteSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Sketch)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).DeleteSketch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_GetSketch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Sketch)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).GetSketch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_GetMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).GetMembership(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_GetFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).GetFrequency(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_GetCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).GetCardinality(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Skizze_GetRankings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SkizzeServer).GetRankings(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Skizze_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Skizze",
	HandlerType: (*SkizzeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSnapshot",
			Handler:    _Skizze_CreateSnapshot_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _Skizze_GetSnapshot_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Skizze_List_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _Skizze_ListAll_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _Skizze_ListDomains_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _Skizze_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _Skizze_DeleteDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _Skizze_GetDomain_Handler,
		},
		{
			MethodName: "CreateSketch",
			Handler:    _Skizze_CreateSketch_Handler,
		},
		{
			MethodName: "DeleteSketch",
			Handler:    _Skizze_DeleteSketch_Handler,
		},
		{
			MethodName: "GetSketch",
			Handler:    _Skizze_GetSketch_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Skizze_Add_Handler,
		},
		{
			MethodName: "GetMembership",
			Handler:    _Skizze_GetMembership_Handler,
		},
		{
			MethodName: "GetFrequency",
			Handler:    _Skizze_GetFrequency_Handler,
		},
		{
			MethodName: "GetCardinality",
			Handler:    _Skizze_GetCardinality_Handler,
		},
		{
			MethodName: "GetRankings",
			Handler:    _Skizze_GetRankings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 1037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0xed, 0x72, 0xdb, 0x44,
	0x14, 0xad, 0x3f, 0xe2, 0x8f, 0xab, 0xd4, 0x71, 0x37, 0x29, 0x18, 0xb5, 0x1d, 0x3a, 0x0b, 0xc3,
	0x78, 0x02, 0x93, 0x50, 0x37, 0x81, 0x81, 0xe9, 0x30, 0x63, 0x1c, 0x3b, 0x38, 0xc4, 0x21, 0xac,
	0xc9, 0x6f, 0x46, 0xb5, 0x37, 0x8d, 0x26, 0x92, 0x6d, 0xb4, 0x32, 0xd3, 0xe4, 0x09, 0x78, 0x1b,
	0x9e, 0x86, 0xf7, 0x61, 0x3f, 0x24, 0xed, 0xae, 0x6c, 0xd3, 0xc9, 0x0f, 0xfe, 0x69, 0xef, 0xde,
	0x73, 0xee, 0xd5, 0xd9, 0xbd, 0x47, 0x82, 0xcf, 0x58, 0x34, 0x39, 0x9c, 0x7a, 0xb1, 0x17, 0xce,
	0xa7, 0x34, 0x38, 0x5c, 0x44, 0xf3, 0x78, 0xfe, 0x76, 0x79, 0x7d, 0xc8, 0x6e, 0xfd, 0xfb, 0x7b,
	0x7a, 0x20, 0xd7, 0xa8, 0x96, 0x86, 0x71, 0x15, 0xb6, 0xfa, 0xe1, 0x22, 0xbe, 0xc3, 0x01, 0x34,
	0xc7, 0xb7, 0x34, 0x9e, 0xdc, 0x5c, 0x46, 0xf3, 0x05, 0x8d, 0x62, 0x9f, 0x32, 0xf4, 0x05, 0x34,
	0x42, 0xef, 0xfd, 0xd5, 0xcc, 0xff, 0x63, 0x49, 0x87, 0x31, 0x0d, 0x59, 0xab, 0xf0, 0xb2, 0xd0,
	0x2e, 0x91, 0x5c, 0x14, 0x3d, 0x87, 0x3a, 0x8d, 0xa2, 0x79, 0x44, 0xbc, 0x98, 0xb6, 0x8a, 0x3c,
	0xa5, 0x48, 0x74, 0x00, 0x21, 0x28, 0x33, 0xff, 0x9e, 0xb6, 0x4a, 0x12, 0x2b, 0x9f, 0xf1, 0x08,
	0x1c, 0x55, 0x6d, 0x1c, 0x8b, 0x14, 0x17, 0x6a, 0xd7, 0x7e, 0x10, 0x48, 0x7c, 0x41, 0xe2, 0xb3,
	0x35, 0xc2, 0xb0, 0x1d, 0x78, 0x2c, 0x1e, 0xcf, 0xbc, 0x05, 0xbb, 0x99, 0xc7, 0x92, 0xbf, 0x44,
	0xac, 0x18, 0x3e, 0x83, 0xca, 0xc9, 0x3c, 0xf4, 0xfc, 0x99, 0x28, 0x36, 0xf3, 0x42, 0xc1, 0x52,
	0x6c, 0xd7, 0x89, 0x7c, 0x46, 0x5f, 0x41, 0x8d, 0xc9, 0x62, 0x94, 0x71, 0x74, 0xa9, 0xed, 0x74,
	0x9a, 0x07, 0xa9, 0x00, 0x07, 0xaa, 0x0d, 0x92, 0x65, 0xe0, 0xbf, 0x0b, 0x50, 0x51, 0xc1, 0xb5,
	0x64, 0x6d, 0x28, 0xc7, 0x77, 0x0b, 0xf1, 0x9a, 0xc5, 0x76, 0xa3, 0xb3, 0x97, 0x27, 0xfa, 0x8d,
	0xef, 0x11, 0x99, 0x81, 0xbe, 0x07, 0x58, 0x64, 0x5a, 0xca, 0xb7, 0x77, 0x3a, 0x6e, 0x3e, 0x5f,
	0xab, 0x4d, 0x8c, 0x6c, 0xf4, 0x25, 0x6c, 0x31, 0xa1, 0x4c, 0xab, 0x2c, 0x61, 0x4f, 0xf3, 0x30,
	0x29, 0x1b, 0x51, 0x39, 0xf8, 0x07, 0x80, 0x11, 0x0d, 0xdf, 0xd2, 0x88, 0xdd, 0xf8, 0x0b, 0xb4,
	0x07, 0x5b, 0x7f, 0x7a, 0xc1, 0x32, 0xed, 0x5a, 0x2d, 0x84, 0xc2, 0x3e, 0x53, 0x59, 0xb2, 0xf5,
	0x1a, 0xc9, 0xd6, 0xf8, 0x5b, 0xa8, 0x0f, 0x22, 0xca, 0x4f, 0x73, 0x36, 0xb9, 0xdb, 0x00, 0xe7,
	0xd1, 0xc9, 0x7c, 0x39, 0x8b, 0x25, 0xb6, 0x44, 0xd4, 0x02, 0x77, 0xa0, 0x4c, 0xbc, 0xd9, 0xed,
	0x83, 0x30, 0x1f, 0xc3, 0xd3, 0x5e, 0x44, 0x79, 0xdb, 0xe9, 0xe1, 0x11, 0x51, 0x99, 0xc5, 0x38,
	0x84, 0xdd, 0xfc, 0xc6, 0x22, 0xb8, 0x43, 0x5f, 0x43, 0x45, 0xbc, 0xe5, 0x92, 0x49, 0xf2, 0x46,
	0xa7, 0x65, 0x48, 0x91, 0x24, 0x8e, 0xe5, 0x3e, 0x49, 0xf2, 0xd0, 0xe7, 0xf0, 0x58, 0x3d, 0x8d,
	0x28, 0x63, 0xde, 0x3b, 0x75, 0x23, 0xeb, 0xc4, 0x0e, 0xe2, 0x3d, 0x40, 0xa7, 0x34, 0xce, 0x37,
	0xf1, 0x57, 0x01, 0x9a, 0x56, 0xf8, 0x7f, 0x6c, 0x41, 0x8c, 0x4d, 0xec, 0x87, 0xbc, 0xac, 0x17,
	0x2e, 0x92, 0xe9, 0xd0, 0x01, 0x7e, 0x2a, 0xce, 0xb9, 0xcf, 0xd2, 0xce, 0xb2, 0x7b, 0x57, 0xf8,
	0xd0, 0xbd, 0xc3, 0xdf, 0x41, 0x5d, 0x01, 0x45, 0xef, 0xe6, 0xdd, 0x2f, 0x7c, 0xf0, 0xee, 0xb7,
	0xa1, 0x29, 0xa0, 0x6a, 0x96, 0x98, 0x62, 0xe0, 0xc7, 0x28, 0x2e, 0xbe, 0x82, 0xf3, 0xc3, 0x95,
	0x0b, 0xfc, 0x1e, 0xa0, 0x3b, 0x9d, 0xea, 0xe6, 0x2a, 0x53, 0x89, 0x91, 0xd3, 0x6b, 0xd5, 0x50,
	0x5c, 0x24, 0xd9, 0x17, 0x99, 0xaa, 0x9a, 0x94, 0x64, 0x5d, 0x37, 0xc9, 0x3e, 0xfa, 0x08, 0x2a,
	0xf2, 0x1e, 0x89, 0xd1, 0x11, 0x85, 0x93, 0x15, 0x06, 0xa8, 0xc9, 0xca, 0xbc, 0x37, 0x4c, 0x00,
	0xf8, 0x69, 0xa5, 0x5d, 0x3c, 0xe8, 0x5d, 0x0d, 0xfe, 0xa2, 0xc5, 0x7f, 0x06, 0x4d, 0x3d, 0x4d,
	0x84, 0xb2, 0x65, 0x10, 0xa3, 0x6f, 0xc0, 0x09, 0xb3, 0x58, 0x4a, 0x6e, 0x9c, 0x81, 0x01, 0x30,
	0x13, 0xf1, 0x4f, 0xb0, 0x93, 0x4d, 0x56, 0x42, 0x75, 0x0c, 0xce, 0x75, 0x12, 0xf2, 0x33, 0x3f,
	0xda, 0xd5, 0x54, 0x3a, 0xdf, 0xcc, 0xc3, 0xc7, 0xf0, 0xa4, 0xe7, 0x45, 0x53, 0x7f, 0xe6, 0x05,
	0x7e, 0x9c, 0x72, 0xbd, 0x04, 0x67, 0xa2, 0x83, 0xf2, 0x6a, 0x94, 0x88, 0x19, 0xc2, 0x6f, 0xa0,
	0x21, 0x26, 0xd4, 0x9f, 0xbd, 0x63, 0x09, 0x66, 0x1f, 0x6a, 0x51, 0x12, 0x49, 0xde, 0xa3, 0xa1,
	0x8b, 0x8b, 0x5c, 0x92, 0xed, 0x73, 0x29, 0xc4, 0x8c, 0x98, 0x6a, 0x88, 0x0b, 0x71, 0x04, 0xd5,
	0x48, 0x72, 0xa5, 0x04, 0xee, 0x5a, 0x21, 0x64, 0x0a, 0x49, 0x53, 0xb9, 0x14, 0x4f, 0x38, 0x97,
	0xa1, 0x86, 0xa0, 0x7a, 0x9d, 0xa7, 0xfa, 0x64, 0x9d, 0x10, 0x39, 0xa6, 0x73, 0xd8, 0xe5, 0x4c,
	0x96, 0x1a, 0x82, 0xeb, 0x38, 0xcf, 0xf5, 0x4c, 0x73, 0xad, 0x48, 0xa7, 0xd9, 0x06, 0x72, 0xe0,
	0xb5, 0x48, 0x82, 0xaa, 0x93, 0xa7, 0x6a, 0xd9, 0x12, 0x69, 0x39, 0x33, 0x9e, 0xfd, 0x23, 0x00,
	0x3d, 0x89, 0xa8, 0x06, 0xe5, 0x51, 0x7f, 0xf4, 0x63, 0xb3, 0x20, 0x9e, 0x06, 0xa4, 0xff, 0x6b,
	0xb3, 0x28, 0x9e, 0x48, 0xf7, 0xe2, 0xe7, 0x66, 0x49, 0x3c, 0xf5, 0xba, 0xe4, 0xa4, 0x59, 0xde,
	0x3f, 0x83, 0x86, 0x6d, 0x21, 0xc8, 0x81, 0xea, 0x65, 0xff, 0xe2, 0x64, 0x78, 0x71, 0xca, 0xc1,
	0x3b, 0xe0, 0x0c, 0x2f, 0x7e, 0xbf, 0x24, 0xbf, 0x9c, 0x92, 0xfe, 0x78, 0xcc, 0x39, 0x1a, 0xbc,
	0xca, 0x55, 0xaf, 0xc7, 0x17, 0x83, 0xab, 0x73, 0xce, 0x04, 0x50, 0x19, 0x74, 0x87, 0xe7, 0x7d,
	0xce, 0xd5, 0xf9, 0xa7, 0x2a, 0x3e, 0x5c, 0xe2, 0x2b, 0x8f, 0x08, 0x34, 0x6c, 0x2f, 0x45, 0x9f,
	0x1a, 0x62, 0xac, 0xb3, 0x5f, 0xf7, 0xc5, 0xe6, 0x04, 0x31, 0x69, 0x8f, 0xd0, 0x10, 0x1c, 0xc3,
	0x19, 0xd1, 0x73, 0x9d, 0xbf, 0xea, 0xa3, 0xae, 0xbb, 0x61, 0x57, 0x51, 0x1d, 0x41, 0x59, 0xd8,
	0x0c, 0x32, 0x3e, 0x6b, 0x86, 0xd5, 0xb9, 0xbb, 0xf9, 0xb0, 0x42, 0xbd, 0x82, 0xaa, 0x58, 0x76,
	0x83, 0x00, 0xed, 0xe8, 0x0c, 0xf9, 0xf7, 0xb2, 0x09, 0xf2, 0x46, 0x79, 0x68, 0xe2, 0x67, 0xab,
	0x30, 0xd7, 0x86, 0x99, 0xbe, 0x27, 0xdb, 0xdc, 0x56, 0x52, 0x24, 0xff, 0x16, 0x2b, 0xae, 0xe6,
	0xae, 0x44, 0x38, 0xea, 0x35, 0x6c, 0x9f, 0xd0, 0x80, 0xfe, 0x07, 0x2a, 0xdf, 0x86, 0x7c, 0xb7,
	0x3a, 0xd7, 0xe9, 0x41, 0x75, 0xb2, 0xee, 0x92, 0x9f, 0x95, 0x15, 0xaf, 0x73, 0x57, 0x22, 0x66,
	0x77, 0x1b, 0x51, 0x1b, 0xbb, 0x7b, 0x50, 0x9d, 0x57, 0x50, 0xe2, 0x2e, 0x8d, 0x0c, 0x8f, 0xd4,
	0x9f, 0x0b, 0x17, 0xe5, 0xa2, 0x4a, 0xee, 0x3e, 0x3c, 0xb6, 0xdc, 0xc6, 0x04, 0x6b, 0x97, 0x77,
	0xed, 0x8b, 0x97, 0x33, 0x27, 0x4e, 0xd3, 0x83, 0x6d, 0xd3, 0x68, 0x36, 0xb0, 0x3c, 0xb3, 0xa2,
	0xb6, 0x2d, 0x71, 0x92, 0x53, 0x68, 0xd8, 0x1e, 0xb3, 0x81, 0xe6, 0x85, 0x15, 0xcd, 0x7b, 0x12,
	0x27, 0xea, 0xca, 0xa9, 0x49, 0x4d, 0x63, 0x03, 0x8b, 0x3d, 0x2d, 0x96, 0x17, 0xe1, 0x47, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x64, 0x21, 0x77, 0xd2, 0x0b, 0x00, 0x00,
}
